<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.iidooo.core.mapper.SecurityUserMapper">
	<resultMap id="BaseResultMap" type="com.iidooo.core.model.po.SecurityUser">
		<id column="UserID" property="userID" jdbcType="INTEGER" />
		<result column="LoginID" property="loginID" jdbcType="VARCHAR" />
		<result column="Password" property="password" jdbcType="VARCHAR" />
		<result column="UserName" property="userName" jdbcType="VARCHAR" />
		<result column="Mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="Email" property="email" jdbcType="VARCHAR" />
		<result column="Sex" property="sex" jdbcType="CHAR" />
		<result column="Birthday" property="birthday" jdbcType="DATE" />
		<result column="WeixinID" property="weixinID" jdbcType="VARCHAR" />
		<result column="PhotoURL" property="photoURL" jdbcType="VARCHAR" />
		<result column="IsSilent" property="isSilent" jdbcType="INTEGER" />
		<result column="IsDisable" property="isDisable" jdbcType="INTEGER" />
		<result column="UserType" property="userType" jdbcType="VARCHAR" />
		<result column="Level" property="level" jdbcType="INTEGER" />
		<result column="Points" property="points" jdbcType="INTEGER" />
		<result column="Experience" property="experience" jdbcType="INTEGER" />
		<result column="Remarks" property="remarks" jdbcType="VARCHAR" />
		<result column="UpdateTime" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="UpdateUserID" property="updateUserID" jdbcType="INTEGER" />
		<result column="CreateTime" property="createTime" jdbcType="TIMESTAMP" />
		<result column="CreateUserID" property="createUserID" jdbcType="INTEGER" />
		<result column="IsDelete" property="isDelete" jdbcType="INTEGER" />
		<result column="Version" property="version" jdbcType="INTEGER" />
		<collection select="selectRoleList" column="userID" property="roleList" ofType="com.iidooo.core.model.po.RoleList"></collection>
	</resultMap>
	<sql id="Base_Column_List">
		U.UserID, U.LoginID, '' as password, U.UserName, U.Mobile, U.Email, U.Sex, U.Birthday, U.WeixinID, U.PhotoURL,
		U.IsSilent, U.IsDisable,
		U.UserType, U.Level, U.Points, U.Experience, U.Remarks, U.UpdateTime, U.UpdateUserID,
		U.CreateTime, U.CreateUserID, U.IsDelete, U.Version
	</sql>

	<resultMap id="RoleResultMap" type="com.iidooo.core.model.po.SecurityRole" >
	    <id column="RoleID" property="roleID" jdbcType="INTEGER" />
	    <result column="RoleCode" property="roleCode" jdbcType="VARCHAR" />
	    <result column="RoleName" property="roleName" jdbcType="VARCHAR" />
	    <result column="Remarks" property="remarks" jdbcType="VARCHAR" />
	    <result column="UpdateTime" property="updateTime" jdbcType="TIMESTAMP" />
	    <result column="UpdateUserID" property="updateUserID" jdbcType="INTEGER" />
	    <result column="CreateTime" property="createTime" jdbcType="TIMESTAMP" />
	    <result column="CreateUserID" property="createUserID" jdbcType="INTEGER" />
	    <result column="IsDelete" property="isDelete" jdbcType="INTEGER" />
	    <result column="Version" property="version" jdbcType="INTEGER" />
	  </resultMap>
	  <sql id="Role_Column_List" >
	    R.RoleID, R.RoleCode, R.RoleName, R.Remarks, R.UpdateTime, R.UpdateUserID, R.CreateTime, R.CreateUserID, 
	    R.IsDelete, R.Version
	  </sql>
	<select id="selectRoleList" parameterType="java.lang.Integer" resultMap="RoleResultMap">
		select 
		<include refid="Role_Column_List" />
		from security_role R 
		join security_user_role UR 
		on R.IsDelete = 0 and UR.IsDelete = 0 and R.RoleID = UR.RoleID and UR.UserID = #{userID,jdbcType=INTEGER}
	</select>

	<!-- 通过LoginID和Password获取用户信息 -->
	<select id="selectByLogin" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from security_user U
		where U.IsDelete = 0 and U.IsDisable = 0 and 
		U.LoginID = #{loginID,jdbcType=VARCHAR} and
		U.Password = #{password,jdbcType=VARCHAR}
	</select>
	
	<!-- 通过Email和Password获取用户信息 -->
	<select id="selectByEmailLogin" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from security_user U
		where U.IsDelete = 0 and U.IsDisable = 0 and 
		U.Email = #{email,jdbcType=VARCHAR} and
		U.Password = #{password,jdbcType=VARCHAR}
	</select>

	<select id="selectByUserID" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from security_user U
		where U.IsDelete = 0 and U.UserID = #{userID,jdbcType=INTEGER}
	</select>

	<!-- 通过用户的Email获得用户对象 -->
	<select id="selectByEmail" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from security_user U
		where U.IsDelete = 0 and U.Email = #{email,jdbcType=VARCHAR}
	</select>

	<!-- 通过用户的登录Token获得用户对象 -->
	<select id="selectByToken" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from security_user U 
		join security_access_token A
		on U.IsDelete = 0 and U.UserID = A.UserID and A.Token = #{token,jdbcType=VARCHAR}
	</select>

	<select id="selectForSearch" resultMap="BaseResultMap" parameterType="com.iidooo.core.model.po.SecurityUser">
		select
		<include refid="Base_Column_List" />
		from security_user U
		where U.IsDelete = 0
		<trim suffixOverrides=",">
			<if test="loginID != null">
				and U.LoginID like '%${loginID}%',
			</if>
			<if test="userName != null">
				and U.UserName like '%${userName}%',
			</if>
			<if test="mobile != null">
				and U.Mobile like '%${mobile}%',
			</if>
			<if test="email != null">
				and U.Email like '%${email}%',
			</if>
			<if test="sex != null">
				and U.Sex = #{sex,jdbcType=CHAR},
			</if>
			<if test="isSilent != null">
				and U.IsSilent = #{isSilent,jdbcType=INTEGER},
			</if>
			<if test="isDisable != null">
				and U.IsDisable = #{isDisable,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				and U.UserType = #{userType,jdbcType=VARCHAR},
			</if>
		</trim>
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from security_user
		where UserID = #{userID,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.iidooo.core.model.po.SecurityUser">
		insert into security_user (UserID, LoginID, Password,
		UserName, Mobile, Email,
		Sex, Birthday, WeixinID,
		PhotoURL, IsSilent, IsDisable,
		UserType, Level, Points,
		Remarks, UpdateTime, UpdateUserID,
		CreateTime, CreateUserID, IsDelete,
		Version)
		values
		(#{userID,jdbcType=INTEGER}, #{loginID,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		#{userName,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{sex,jdbcType=CHAR}, #{birthday,jdbcType=DATE}, #{weixinID,jdbcType=VARCHAR},
		#{photoURL,jdbcType=VARCHAR},
		#{isSilent,jdbcType=INTEGER}, #{isDisable,jdbcType=INTEGER},
		#{userType,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{points,jdbcType=INTEGER},
		#{remarks,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{updateUserID,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP},
		#{createUserID,jdbcType=INTEGER}, #{isDelete,jdbcType=INTEGER},
		#{version,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" useGeneratedKeys="true" keyProperty="userID" parameterType="com.iidooo.core.model.po.SecurityUser">
		insert into security_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="loginID != null">
				LoginID,
			</if>
			<if test="password != null">
				Password,
			</if>
			<if test="userName != null">
				UserName,
			</if>
			<if test="mobile != null">
				Mobile,
			</if>
			<if test="email != null">
				Email,
			</if>
			<if test="sex != null">
				Sex,
			</if>
			<if test="birthday != null">
				Birthday,
			</if>
			<if test="weixinID != null">
				WeixinID,
			</if>
			<if test="photoURL != null">
				PhotoURL,
			</if>
			<if test="isSilent != null">
				IsSilent,
			</if>
			<if test="isDisable != null">
				IsDisable,
			</if>
			<if test="userType != null">
				UserType,
			</if>
			<if test="level != null">
				Level,
			</if>
			<if test="points != null">
				Points,
			</if>
			<if test="experience != null">
				Experience,
			</if>
			<if test="remarks != null">
				Remarks,
			</if>
			<if test="createTime != null">
				CreateTime,
			</if>
			<if test="createUserID != null">
				CreateUserID,
			</if>
			<if test="updateTime != null">
				UpdateTime,
			</if>
			<if test="updateUserID != null">
				UpdateUserID,
			</if>
			IsDelete,Version,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="loginID != null">
				#{loginID,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=CHAR},
			</if>
			<if test="birthday != null">
				#{birthday,jdbcType=DATE},
			</if>
			<if test="weixinID != null">
				#{weixinID,jdbcType=VARCHAR},
			</if>
			<if test="photoURL != null">
				#{photoURL,jdbcType=VARCHAR},
			</if>
			<if test="isSilent != null">
				#{isSilent,jdbcType=INTEGER},
			</if>
			<if test="isDisable != null">
				#{isDisable,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				#{userType,jdbcType=VARCHAR},
			</if>
			<if test="level != null">
				#{level,jdbcType=INTEGER},
			</if>
			<if test="points != null">
				#{points,jdbcType=INTEGER},
			</if>
			<if test="experience != null">
				#{experience,jdbcType=INTEGER},
			</if>
			<if test="remarks != null">
				#{remarks,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createUserID != null">
				#{createUserID,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateUserID != null">
				#{updateUserID,jdbcType=INTEGER},
			</if>
			0,1
		</trim>
	</insert>

	<!-- 根据用户ID更新用户信息 -->
	<update id="updateByUserID" parameterType="com.iidooo.core.model.po.SecurityUser">
		update security_user
		<set>
			<if test="loginID != null">
				LoginID = #{loginID,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				UserName = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				Mobile = #{mobile,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				Email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				Sex = #{sex,jdbcType=CHAR},
			</if>
			<if test="birthday != null">
				Birthday = #{birthday,jdbcType=DATE},
			</if>
			<if test="weixinID != null">
				WeixinID = #{weixinID,jdbcType=VARCHAR},
			</if>
			<if test="photoURL != null">
				PhotoURL = #{photoURL,jdbcType=VARCHAR},
			</if>
			<if test="isSilent != null">
				IsSilent = #{isSilent,jdbcType=INTEGER},
			</if>
			<if test="isDisable != null">
				IsDisable = #{isDisable,jdbcType=INTEGER},
			</if>
			<if test="level != null">
				Level = #{level,jdbcType=INTEGER},
			</if>
			<if test="points != null">
				Points = #{points,jdbcType=INTEGER},
			</if>
			<if test="experience != null">
				Experience = #{experience,jdbcType=INTEGER},
			</if>
			<if test="remarks != null">
				Remarks = #{remarks,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateUserID != null">
				UpdateUserID = #{updateUserID,jdbcType=INTEGER},
			</if>
			Version = Version + 1,
		</set>
		where UserID = #{userID,jdbcType=INTEGER}
	</update>
</mapper>